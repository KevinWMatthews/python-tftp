protocol.txt

5. TFTP Packets

   TFTP supports five types of packets, all of which have been mentioned
   above:

          opcode  operation
            1     Read request (RRQ)
            2     Write request (WRQ)
            3     Data (DATA)
            4     Acknowledgment (ACK)
            5     Error (ERROR)


            2 bytes     string    1 byte     string   1 byte
            ------------------------------------------------
           | Opcode |  Filename  |   0  |    Mode    |   0  |
            ------------------------------------------------

                       Figure 5-1: RRQ/WRQ packet

The mode field contains the
   string "netascii", "octet", or "mail" (or any combination of upper
   and lower case, such as "NETASCII", NetAscii", etc.) in netascii
   indicating the three modes defined in the protocol.

Octet mode is used to transfer a file that is in the 8-bit
   format of the machine from which the file is being transferred.  It
   is assumed that each type of machine has a single 8-bit format that
   is more common, and that that format is chosen.  For example, on a
   DEC-20, a 36 bit machine, this is four 8-bit bytes to a word with
   four bits of breakage.  If a host receives a octet file and then
   returns it, the returned file must be identical to the original.

Any transfer begins with a request to read or write a file, which
   also serves to request a connection.  If the server grants the
   request, the connection is opened and the file is sent in fixed
   length blocks of 512 bytes.  Each data packet contains one block of
   data, and must be acknowledged by an acknowledgment packet before the
   next packet can be sent.  A data packet of less than 512 bytes
   signals termination of a transfer.  If a packet gets lost in the
   network, the intended recipient will timeout and may retransmit his
   last packet (which may be data or an acknowledgment), thus causing
   the sender of the lost packet to retransmit that lost packet.  The
   sender has to keep just one packet on hand for retransmission, since
   the lock step acknowledgment guarantees that all older packets have
   been received.

The end of a transfer is marked by a DATA packet that contains
   between 0 and 511 bytes of data (i.e., Datagram length < 516).

If a data packet is exactly 512 bytes long, the server will/must send a second packet
with 0 bytes of data. Think about it; 512 bytes means that more data is coming,
so more data must be sent. There is nothing to send, however, so simply send an empty packet.

The length of a full packet (signalling that transmission will continue) is 516 bytes.
This contains the 2-byte opcode, the 2-byte block number, and the 512 byte data field.
If the length of the data field is less than 512 bytes, the transmission is over.
It is best to test the length of the data field. If the packet length is < 516 bytes
but the data field is 512 bytes, there is corruption in the opcode or block number.
What if the packet is greater than 512 bytes? Might be a transmission error?

After the final ack is sent, the client should "dally" and see if the server  missed the ack
and needs to retransmit the final packet.
The server that I have observed sends an invidual packet a maximum of two times.
It will not send a third packet/retry a second time.
(Verify this with other TFTP servers).
