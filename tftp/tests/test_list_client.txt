TFTP protocol for reading N blocks:
    Client              Server
    __________________________
    Read        -->

                <--     Data block 1 (== 512 K)
    Ack block 1 -->

                <--     Data block 2 (== 512 K)
    Ack block 2 -->

                ...

                <--     Data block n (== 512 K)
    Ack block n -->

                <--     Data N (< 512 K)
    Ack block N -->

Test list:
    Read request failure.
        --> Failure

    Server response failure, block 1.
        --> Read
        <-- Failure:
                no response (timeout)
                wrong block number
                wrong opcode

    Ack failure, block 1.
        --> Read
        <-- Data block 1
        --> Failure: ack block 1
                packet not received
        <-- Data block 1

    Valid transmission, 1 block:
        --> Read
        <-- Data block 1
        --> Ack block 1

    Valid transmission after ack failure, block 1.
        --> Read
        <-- Data block 1
        --> Failure: ack block 1
                packet not received
        <-- Data block 1
        --> Ack block 1

    Server response failure, block n.
        --> Read
        <-- Data block 1
        --> Ack block 1
        <-- Failure
                no response (timeout)
                wrong block number
                wrong opcode
        Does the client send an ack? I think not.
        Does the server retry?

    Two ack failures, block n.
        --> Read
        <-- Data block 1
        --> Ack block 1
        <-- Data block n
        --> Failure: ack block n
                packet not received
        <-- Data block n
        --> Failure: ack block n
                packet not received

    Server response failure, block N.
        --> Read
        <-- Data block 1
        --> Ack block 1
        <-- Data block n
        --> Ack block n
        <-- Failure
                no response (timeout)
                wrong block number
                wrong opcode

    Ack failure, block N.
        --> Read
        <-- Data block 1
        --> Ack block 1
        <-- Data block n
        --> Ack block n
        <-- Data block N
        --> Failure
                ?

    Valid transmission, N blocks.
        --> Read
        <-- Data block 1
        --> Ack block 1
        <-- Data block n
        --> Ack block n
        <-- Data block N
        --> Ack block N

    Valid transmission with ack failure, N blocks.
        --> Read
        <-- Data block 1
        --> Ack block 1
        <-- Data block n
        --> Failure: ack block n
                packet not received
        <-- Data block n
        --> Ack block n
        <-- Data block N
        --> Ack block N

    Ack failure on final block, N blocks.
        --> Read
        <-- Data block 1
        --> Ack block 1
        <-- Data block n
        <-- Data block n
        --> Ack block n
        <-- Data block N
        --> Failure: ack block N
                packet not received
        <-- Data block N
        --> Failure: ack block N
                packet not received

    Valid transmission with ack failure on final block, N blocks.
        --> Read
        <-- Data block 1
        --> Ack block 1
        <-- Data block n
        <-- Data block n
        --> Ack block n
        <-- Data block N
        --> Failure: ack block N
                packet not received
        <-- Data block N
        --> Ack block N

    Different filenames.
        input sanitization
    Different server IP.
        input sanitization
    Different server port.
        69 by default?
        Other ports?
    Different Transmission ID:
        1
        65535
        65536   fail
        Are there any theoreticall invalid ports?
    Different data packets:
        minimum
        512 K
        513 K
    Different number of blocks:
        1
        2
        65535   (original TFTP size limit was 512K * 65535 = 32 M)
        65536?  this works with some tftp server implementations; the block number just rolls over.
    Different modes:
        octed
        mail
        netascii

    Success on block 1.
    Success on block 2.
    Success on block n.

TODO
    Do we want to convert read()'s ip and port arguments into a tuple? I think so.
    If input sanitation fails, do we send a response to the server?
    What if we want to transmit two complete blocks? 512K and 512K. What is the stop condition? An empty third block?
